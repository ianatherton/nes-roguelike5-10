;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_wait_vblank
	.export		_write_text
	.export		_main
	.export		_nmi_handler
	.export		_irq_handler

.segment	"RODATA"

L0048:
	.byte	$43,$52,$41,$56,$45,$4E,$20,$43,$41,$56,$45,$52,$4E,$53,$00
L004D:
	.byte	$54,$45,$53,$54,$20,$52,$4F,$4D,$00

; ---------------------------------------------------------------
; void __near__ wait_vblank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_vblank: near

.segment	"CODE"

	jmp     L0002
L0002:	ldx     #$00
	lda     $2002
	ldx     #$00
	and     #$80
	cpx     #$00
	bne     L0008
	cmp     #$00
L0008:	jsr     booleq
	jne     L0002
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ write_text (__near__ const unsigned char *, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write_text: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	jsr     shlax1
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	jsr     pushax
	lda     #$00
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldx     #$00
	ldx     #$00
	sta     $2006
	ldy     #$02
	jsr     ldaxysp
	ldx     #$00
	ldx     #$00
	sta     $2006
	jmp     L0016
L0014:	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$20
	jsr     decaxy
	ldx     #$00
	sta     $2007
	ldy     #$00
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L0016:	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jne     L0014
	jsr     incsp7
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $2000
	ldx     #$00
	lda     #$00
	sta     $2001
	jsr     _wait_vblank
	jsr     _wait_vblank
	ldx     #$00
	lda     #$20
	sta     $2006
	ldx     #$00
	lda     #$00
	sta     $2006
	jsr     decsp2
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L002D:	ldy     #$01
	jsr     ldaxysp
	cpx     #$04
	jsr     boolult
	jne     L0030
	jmp     L002E
L0030:	ldx     #$00
	lda     #$00
	sta     $2007
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L002D
L002E:	jsr     incsp2
	ldx     #$00
	lda     #$3F
	sta     $2006
	ldx     #$00
	lda     #$00
	sta     $2006
	ldx     #$00
	lda     #$0F
	sta     $2007
	ldx     #$00
	lda     #$30
	sta     $2007
	ldx     #$00
	lda     #$16
	sta     $2007
	lda     #<(L0048)
	ldx     #>(L0048)
	jsr     pushax
	lda     #$09
	jsr     pusha
	lda     #$0A
	jsr     _write_text
	lda     #<(L004D)
	ldx     #>(L004D)
	jsr     pushax
	lda     #$0B
	jsr     pusha
	lda     #$0C
	jsr     _write_text
	ldx     #$00
	lda     #$90
	sta     $2000
	ldx     #$00
	lda     #$1E
	sta     $2001
	ldx     #$00
	lda     #$00
	sta     $2005
	ldx     #$00
	lda     #$00
	sta     $2005
	jmp     L005F
L005D:	jsr     _wait_vblank
	ldx     #$00
	lda     #$00
	sta     $2005
	ldx     #$00
	lda     #$00
	sta     $2005
L005F:	jmp     L005D
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ nmi_handler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nmi_handler: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     $2005
	ldx     #$00
	lda     #$00
	sta     $2005
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ __fastcall__ irq_handler (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_irq_handler: near

.segment	"CODE"

	rts

.endproc

